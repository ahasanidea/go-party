{"version":3,"sources":["../../src/services/UserService.js"],"names":["UserService","newUser","database","User","create","id","update","is_active","where","userId","avatar","returning","user","username","password","findOne","Error","bcrypt","compare","isPasswordMatch"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;AACA;;IAEMA,W;;;;;;;;;;;;oDACmBC,O;;;;;;;uBAEAC,mBAASC,IAAT,CAAcC,MAAd,CAAqBH,OAArB,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qDAMMI,E;;;;;;;uBAENH,mBAASC,IAAT,CAAcG,MAAd,CAAqB;AAAEC,kBAAAA,SAAS,EAAE;AAAb,iBAArB,EAA0C;AAAEC,kBAAAA,KAAK,EAAE;AAAEH,oBAAAA,EAAE,EAAFA;AAAF;AAAT,iBAA1C,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qDAMKI,M,EAAQC,M;;;;;;;;uBAEPR,mBAASC,IAAT,CAAcG,MAAd,CAAqB;AAAEI,kBAAAA,MAAM,EAANA;AAAF,iBAArB,EAAiC;AAAEC,kBAAAA,SAAS,EAAE,IAAb;AAAmBH,kBAAAA,KAAK,EAAE;AAAEH,oBAAAA,EAAE,EAAEI;AAAN;AAA1B,iBAAjC,C;;;AAAbG,gBAAAA,I;kDACCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAR,C;;;;;;;;;;;;;;;;;;;;;;;;;;qDAMgBC,Q,EAAUC,Q;;;;;;;;uBAEdZ,mBAASC,IAAT,CAAcY,OAAd,CAAsB;AAAEP,kBAAAA,KAAK,EAAE;AAAEK,oBAAAA,QAAQ,EAARA;AAAF;AAAT,iBAAtB,C;;;AAAbD,gBAAAA,I;;oBACDA,I;;;;;sBACK,IAAII,KAAJ,CAAU,2BAAV,C;;;;uBAEoBC,mBAAOC,OAAP,CAAeJ,QAAf,EAAyBF,IAAI,CAACE,QAA9B,C;;;AAAxBK,gBAAAA,e;;oBACDA,e;;;;;sBACK,IAAIH,KAAJ,CAAU,2BAAV,C;;;oBAELJ,IAAI,CAACL,S;;;;;sBACA,IAAIS,KAAJ,CAAU,6BAAV,C;;;kDAEHJ,I;;;;;;;;;;;;;;;;;;;;;;;;;eAOJZ,W","sourcesContent":["import database from '../models'\nimport bcrypt from 'bcrypt'\n\nclass UserService {\n    static async addUser(newUser) {\n        try {\n            return await database.User.create(newUser)\n        } catch (error) {\n            throw error\n        }\n    }\n\n    static async verifyAccount(id) {\n        try {\n            return await database.User.update({ is_active: true }, { where: { id } })\n        } catch (error) {\n            throw error\n        }\n    }\n\n    static async uploadAvatar(userId, avatar) {\n        try {\n            const user = await database.User.update({ avatar }, { returning: true, where: { id: userId } })\n            return user[1][0]\n        } catch (error) {\n            throw error\n        }\n    }\n\n    static async findByCredentials(username, password) {\n        try {\n            const user = await database.User.findOne({ where: { username } })\n            if (!user) {\n                throw new Error('Invalid login credentials')\n            }\n            const isPasswordMatch = await bcrypt.compare(password, user.password)\n            if (!isPasswordMatch) {\n                throw new Error('Invalid login credentials')\n            }\n            if (!user.is_active) {\n                throw new Error('Please verify your account.')\n            }\n            return user\n        } catch (error) {\n            throw error\n        }\n    }\n}\n\nexport default UserService\n"],"file":"UserService.js"}