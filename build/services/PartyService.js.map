{"version":3,"sources":["../../src/services/PartyService.js"],"names":["PartyService","newParty","database","Party","create","user_id","limit","offset","findAndCountAll","where","host_id"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;IAEMA,Y;;;;;;;;;;;;oDACuBC,Q;;;;;;;uBAEJC,mBAASC,KAAT,CAAeC,MAAf,CAAsBH,QAAtB,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qDAMYI,O,EAASC,K,EAAOC,M;;;;;;;uBAE5BL,mBAASC,KAAT,CAAeK,eAAf,CAA+B;AACxCC,kBAAAA,KAAK,EAAE;AACHC,oBAAAA,OAAO,EAAEL;AADN,mBADiC;AAIxCC,kBAAAA,KAAK,EAALA,KAJwC;AAKxCC,kBAAAA,MAAM,EAANA;AALwC,iBAA/B,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;eAaVP,Y","sourcesContent":["import database from '../models'\n\nclass PartyService {\n    static async createParty(newParty) {\n        try {\n            return await database.Party.create(newParty)\n        } catch (error) {\n            throw error\n        }\n    }\n    \n    static async filterPartiesByUser(user_id, limit, offset) {\n        try {\n            return await database.Party.findAndCountAll({\n                where: {\n                    host_id: user_id,\n                },\n                limit,\n                offset,\n            })\n        } catch (error) {\n            throw error\n        }\n    }\n}\n\nexport default PartyService\n"],"file":"PartyService.js"}