{"version":3,"sources":["../../src/services/RequestService.js"],"names":["RequestService","newRequest","database","Request","create","guest_id","party_id","findOne","where","findAndCountAll","attributes","include","model","User","as","request_id","findByPk","status","update","id"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;IAEMA,c;;;;;;;;;;;;oDAC4BC,U;;;;;;;uBAETC,mBAASC,OAAT,CAAiBC,MAAjB,CAAwBH,UAAxB,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qDAMWI,Q,EAAUC,Q;;;;;;;uBAErBJ,mBAASC,OAAT,CAAiBI,OAAjB,CAAyB;AAClCC,kBAAAA,KAAK,EAAE;AACHH,oBAAAA,QAAQ,EAARA,QADG;AAEHC,oBAAAA,QAAQ,EAARA;AAFG;AAD2B,iBAAzB,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qDAWSA,Q;;;;;;;uBAETJ,mBAASC,OAAT,CAAiBM,eAAjB,CAAiC;AAC1CD,kBAAAA,KAAK,EAAE;AACHF,oBAAAA,QAAQ,EAARA;AADG,mBADmC;AAI1CI,kBAAAA,UAAU,EAAE,CAAC,IAAD,EAAO,QAAP,CAJ8B;AAK1CC,kBAAAA,OAAO,EAAE;AACLC,oBAAAA,KAAK,EAAEV,mBAASW,IADX;AAELC,oBAAAA,EAAE,EAAE,WAFC;AAGLJ,oBAAAA,UAAU,EAAE,CAAC,IAAD,EAAO,UAAP,EAAmB,OAAnB;AAHP;AALiC,iBAAjC,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qDAgBSK,U;;;;;;;uBAETb,mBAASC,OAAT,CAAiBa,QAAjB,CAA0BD,UAA1B,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qDAMWA,U,EAAYE,M;;;;;;;uBAEvBf,mBAASC,OAAT,CAAiBe,MAAjB,CACT;AAAED,kBAAAA,MAAM,EAANA;AAAF,iBADS,EAET;AACIT,kBAAAA,KAAK,EAAE;AACHW,oBAAAA,EAAE,EAAEJ;AADD;AADX,iBAFS,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;eAcVf,c","sourcesContent":["import database from '../models'\n\nclass RequestService {\n    static async sendPartyRequest(newRequest) {\n        try {\n            return await database.Request.create(newRequest)\n        } catch (error) {\n            throw error\n        }\n    }\n\n    static async checkRequestExists(guest_id, party_id) {\n        try {\n            return await database.Request.findOne({\n                where: {\n                    guest_id,\n                    party_id,\n                },\n            })\n        } catch (error) {\n            throw error\n        }\n    }\n\n    static async getPartyRequests(party_id) {\n        try {\n            return await database.Request.findAndCountAll({\n                where: {\n                    party_id,\n                },\n                attributes: ['id', 'status'],\n                include: {\n                    model: database.User,\n                    as: 'requestor',\n                    attributes: ['id', 'username', 'email'],\n                },\n            })\n        } catch (error) {\n            throw error\n        }\n    }\n\n    static async findPartyRequest(request_id) {\n        try {\n            return await database.Request.findByPk(request_id)\n        } catch (error) {\n            throw error\n        }\n    }\n\n    static async modifyPartyRequest(request_id, status) {\n        try {\n            return await database.Request.update(\n                { status },\n                {\n                    where: {\n                        id: request_id,\n                    },\n                }\n            )\n        } catch (error) {\n            throw error\n        }\n    }\n}\n\nexport default RequestService\n"],"file":"RequestService.js"}