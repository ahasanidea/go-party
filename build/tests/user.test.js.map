{"version":3,"sources":["../../src/tests/user.test.js"],"names":["usersUrl","chai","use","chaiHttp","expect","describe","it","done","username","validUser","email","password","request","app","post","set","send","end","err","res","status","to","equal","body","data","include","id","invalidUser"],"mappings":";;;;AACA;;AACA;;AACA;;AACA;;AACA;;AALA;AAOA,IAAMA,QAAQ,GAAG,eAAjB;;AAEAC,iBAAKC,GAAL,CAASC,oBAAT;;IACQC,M,GAAWH,gB,CAAXG,M;AAERC,QAAQ,CAAC,6BAAD,EAAgC,YAAM;AAC1CC,EAAAA,EAAE,CAAC,sBAAD,EAAyB,UAAAC,IAAI,EAAI;AAAA,QACvBC,QADuB,GACOC,mBADP,CACvBD,QADuB;AAAA,QACbE,KADa,GACOD,mBADP,CACbC,KADa;AAAA,QACNC,QADM,GACOF,mBADP,CACNE,QADM;;AAE/BV,qBACKW,OADL,CACaC,eADb,EAEKC,IAFL,CAEUd,QAFV,EAGKe,GAHL,CAGS,QAHT,EAGmB,kBAHnB,EAIKC,IAJL,CAIUP,mBAJV,EAKKQ,GALL,CAKS,UAACC,GAAD,EAAMC,GAAN,EAAc;AACff,MAAAA,MAAM,CAACe,GAAG,CAACC,MAAL,CAAN,CAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACAlB,MAAAA,MAAM,CAACe,GAAG,CAACI,IAAJ,CAASC,IAAV,CAAN,CAAsBH,EAAtB,CAAyBI,OAAzB,CAAiC;AAC7BC,QAAAA,EAAE,EAAE,CADyB;AAE7BlB,QAAAA,QAAQ,EAARA,QAF6B;AAG7BE,QAAAA,KAAK,EAALA,KAH6B;AAI7BC,QAAAA,QAAQ,EAARA;AAJ6B,OAAjC;AAMAJ,MAAAA,IAAI;AACP,KAdL;AAeH,GAjBC,CAAF;AAmBAD,EAAAA,EAAE,CAAC,0DAAD,EAA6D,UAAAC,IAAI,EAAI;AACnEN,qBACKW,OADL,CACaC,eADb,EAEKC,IAFL,CAEUd,QAFV,EAGKe,GAHL,CAGS,QAHT,EAGmB,kBAHnB,EAIKC,IAJL,CAIUW,qBAJV,EAKKV,GALL,CAKS,UAACC,GAAD,EAAMC,GAAN,EAAc;AACff,MAAAA,MAAM,CAACe,GAAG,CAACC,MAAL,CAAN,CAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACAlB,MAAAA,MAAM,CAACe,GAAG,CAACI,IAAJ,CAASH,MAAV,CAAN,CAAwBC,EAAxB,CAA2BC,KAA3B,CAAiC,OAAjC;AACAf,MAAAA,IAAI;AACP,KATL;AAUH,GAXC,CAAF;AAYH,CAhCO,CAAR","sourcesContent":["/* eslint-disable no-undef */\nimport chai from 'chai'\nimport chaiHttp from 'chai-http'\nimport 'chai/register-should'\nimport app from '../app'\nimport { validUser, invalidUser } from './testData'\n\nconst usersUrl = '/api/v1/users'\n\nchai.use(chaiHttp)\nconst { expect } = chai\n\ndescribe('Testing the user endpoints:', () => {\n    it('should create a user', done => {\n        const { username, email, password } = validUser\n        chai\n            .request(app)\n            .post(usersUrl)\n            .set('Accept', 'application/json')\n            .send(validUser)\n            .end((err, res) => {\n                expect(res.status).to.equal(201)\n                expect(res.body.data).to.include({\n                    id: 1,\n                    username,\n                    email,\n                    password,\n                })\n                done()\n            })\n    })\n\n    it('Should not create a user with incomplete required fields', done => {\n        chai\n            .request(app)\n            .post(usersUrl)\n            .set('Accept', 'application/json')\n            .send(invalidUser)\n            .end((err, res) => {\n                expect(res.status).to.equal(400)\n                expect(res.body.status).to.equal('error')\n                done()\n            })\n    })\n})\n"],"file":"user.test.js"}