{"version":3,"sources":["../../src/tests/user.test.js"],"names":["usersUrl","chai","use","chaiHttp","expect","describe","it","done","username","validUser","email","request","app","post","set","send","end","err","res","status","to","equal","body","data","user","include","id","invalidUser"],"mappings":";;;;AACA;;AACA;;AACA;;AACA;;AACA;;AALA;AAOA,IAAMA,QAAQ,GAAG,eAAjB;;AAEAC,iBAAKC,GAAL,CAASC,oBAAT;;IACQC,M,GAAWH,gB,CAAXG,M;AAERC,QAAQ,CAAC,6BAAD,EAAgC,YAAM;AAC1CC,EAAAA,EAAE,CAAC,sBAAD,EAAyB,UAAAC,IAAI,EAAI;AAAA,QACvBC,QADuB,GACHC,mBADG,CACvBD,QADuB;AAAA,QACbE,KADa,GACHD,mBADG,CACbC,KADa;;AAE/BT,qBACKU,OADL,CACaC,eADb,EAEKC,IAFL,CAEUb,QAFV,EAGKc,GAHL,CAGS,QAHT,EAGmB,kBAHnB,EAIKC,IAJL,CAIUN,mBAJV,EAKKO,GALL,CAKS,UAACC,GAAD,EAAMC,GAAN,EAAc;AACfd,MAAAA,MAAM,CAACc,GAAG,CAACC,MAAL,CAAN,CAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACAjB,MAAAA,MAAM,CAACc,GAAG,CAACI,IAAJ,CAASC,IAAT,CAAcC,IAAf,CAAN,CAA2BJ,EAA3B,CAA8BK,OAA9B,CAAsC;AAClCC,QAAAA,EAAE,EAAE,CAD8B;AAElClB,QAAAA,QAAQ,EAARA,QAFkC;AAGlCE,QAAAA,KAAK,EAALA;AAHkC,OAAtC;AAKAH,MAAAA,IAAI;AACP,KAbL;AAcH,GAhBC,CAAF;AAkBAD,EAAAA,EAAE,CAAC,0DAAD,EAA6D,UAAAC,IAAI,EAAI;AACnEN,qBACKU,OADL,CACaC,eADb,EAEKC,IAFL,CAEUb,QAFV,EAGKc,GAHL,CAGS,QAHT,EAGmB,kBAHnB,EAIKC,IAJL,CAIUY,qBAJV,EAKKX,GALL,CAKS,UAACC,GAAD,EAAMC,GAAN,EAAc;AACfd,MAAAA,MAAM,CAACc,GAAG,CAACC,MAAL,CAAN,CAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACAjB,MAAAA,MAAM,CAACc,GAAG,CAACI,IAAJ,CAASH,MAAV,CAAN,CAAwBC,EAAxB,CAA2BC,KAA3B,CAAiC,OAAjC;AACAd,MAAAA,IAAI;AACP,KATL;AAUH,GAXC,CAAF;AAYH,CA/BO,CAAR","sourcesContent":["/* eslint-disable no-undef */\nimport chai from 'chai'\nimport chaiHttp from 'chai-http'\nimport 'chai/register-should'\nimport app from '../app'\nimport { validUser, invalidUser } from './testData'\n\nconst usersUrl = '/api/v1/users'\n\nchai.use(chaiHttp)\nconst { expect } = chai\n\ndescribe('Testing the user endpoints:', () => {\n    it('should create a user', done => {\n        const { username, email } = validUser\n        chai\n            .request(app)\n            .post(usersUrl)\n            .set('Accept', 'application/json')\n            .send(validUser)\n            .end((err, res) => {\n                expect(res.status).to.equal(201)\n                expect(res.body.data.user).to.include({\n                    id: 1,\n                    username,\n                    email,\n                })\n                done()\n            })\n    })\n\n    it('Should not create a user with incomplete required fields', done => {\n        chai\n            .request(app)\n            .post(usersUrl)\n            .set('Accept', 'application/json')\n            .send(invalidUser)\n            .end((err, res) => {\n                expect(res.status).to.equal(400)\n                expect(res.body.status).to.equal('error')\n                done()\n            })\n    })\n})\n"],"file":"user.test.js"}