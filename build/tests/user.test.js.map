{"version":3,"sources":["../../src/tests/user.test.js"],"names":["usersUrl","chai","use","chaiHttp","expect","describe","it","done","username","validUser","email","request","app","post","set","send","end","err","res","status","to","equal","body","data","user","include","id","invalidUser","invalidDataUser","password","message","token","jwt","sign","process","env","JWT_KEY","expiresIn","get","put","attach","fs","readFileSync","error","newUserDetails","bio","school","patch","dob"],"mappings":";;;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAPA;AASA,IAAMA,QAAQ,GAAG,eAAjB;;AAEAC,iBAAKC,GAAL,CAASC,oBAAT;;IACQC,M,GAAWH,gB,CAAXG,M;AAERC,QAAQ,CAAC,6BAAD,EAAgC,YAAM;AAC1CC,EAAAA,EAAE,CAAC,sBAAD,EAAyB,UAAAC,IAAI,EAAI;AAAA,QACvBC,QADuB,GACHC,mBADG,CACvBD,QADuB;AAAA,QACbE,KADa,GACHD,mBADG,CACbC,KADa;;AAE/BT,qBACKU,OADL,CACaC,eADb,EAEKC,IAFL,CAEUb,QAFV,EAGKc,GAHL,CAGS,QAHT,EAGmB,kBAHnB,EAIKC,IAJL,CAIUN,mBAJV,EAKKO,GALL,CAKS,UAACC,GAAD,EAAMC,GAAN,EAAc;AACfd,MAAAA,MAAM,CAACc,GAAG,CAACC,MAAL,CAAN,CAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACAjB,MAAAA,MAAM,CAACc,GAAG,CAACI,IAAJ,CAASC,IAAT,CAAcC,IAAf,CAAN,CAA2BJ,EAA3B,CAA8BK,OAA9B,CAAsC;AAClCC,QAAAA,EAAE,EAAE,CAD8B;AAElClB,QAAAA,QAAQ,EAARA,QAFkC;AAGlCE,QAAAA,KAAK,EAALA;AAHkC,OAAtC;AAKAH,MAAAA,IAAI;AACP,KAbL;AAcH,GAhBC,CAAF;AAkBAD,EAAAA,EAAE,CAAC,0DAAD,EAA6D,UAAAC,IAAI,EAAI;AACnEN,qBACKU,OADL,CACaC,eADb,EAEKC,IAFL,CAEUb,QAFV,EAGKc,GAHL,CAGS,QAHT,EAGmB,kBAHnB,EAIKC,IAJL,CAIUY,qBAJV,EAKKX,GALL,CAKS,UAACC,GAAD,EAAMC,GAAN,EAAc;AACfd,MAAAA,MAAM,CAACc,GAAG,CAACC,MAAL,CAAN,CAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACAjB,MAAAA,MAAM,CAACc,GAAG,CAACI,IAAJ,CAASH,MAAV,CAAN,CAAwBC,EAAxB,CAA2BC,KAA3B,CAAiC,OAAjC;AACAd,MAAAA,IAAI;AACP,KATL;AAUH,GAXC,CAAF;AAaAD,EAAAA,EAAE,CAAC,wEAAD,EAA2E,UAAAC,IAAI,EAAI;AACjF;AACAN,qBACKU,OADL,CACaC,eADb,EAEKC,IAFL,CAEUb,QAFV,EAGKc,GAHL,CAGS,QAHT,EAGmB,kBAHnB,EAIKC,IAJL,CAIUa,yBAJV,EAKKZ,GALL,CAKS,UAACC,GAAD,EAAMC,GAAN,EAAc;AACfd,MAAAA,MAAM,CAACc,GAAG,CAACC,MAAL,CAAN,CAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACAd,MAAAA,IAAI;AACP,KARL;AASH,GAXC,CAAF;AAaAD,EAAAA,EAAE,CAAC,wCAAD,EAA2C,UAAAC,IAAI,EAAI;AAAA,QACzCC,QADyC,GAClBC,mBADkB,CACzCD,QADyC;AAAA,QAC/BqB,QAD+B,GAClBpB,mBADkB,CAC/BoB,QAD+B;;AAEjD5B,qBACKU,OADL,CACaC,eADb,EAEKC,IAFL,WAEab,QAFb,aAGKc,GAHL,CAGS,QAHT,EAGmB,kBAHnB,EAIKC,IAJL,CAIU;AAAEP,MAAAA,QAAQ,EAARA,QAAF;AAAYqB,MAAAA,QAAQ,EAARA;AAAZ,KAJV,EAKKb,GALL,CAKS,UAACC,GAAD,EAAMC,GAAN,EAAc;AACfd,MAAAA,MAAM,CAACc,GAAG,CAACC,MAAL,CAAN,CAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACAjB,MAAAA,MAAM,CAACc,GAAG,CAACI,IAAJ,CAASQ,OAAV,CAAN,CAAyBV,EAAzB,CAA4BC,KAA5B,CAAkC,6BAAlC;AACAd,MAAAA,IAAI;AACP,KATL;AAUH,GAZC,CAAF;AAcAD,EAAAA,EAAE,CAAC,0BAAD,EAA6B,UAAAC,IAAI,EAAI;AACnC,QAAMwB,KAAK,GAAGC,yBAAIC,IAAJ,CAAS;AAAEP,MAAAA,EAAE,EAAE;AAAN,KAAT,EAAoBQ,OAAO,CAACC,GAAR,CAAYC,OAAhC,EAAyC;AAAEC,MAAAA,SAAS,EAAE;AAAb,KAAzC,CAAd;;AACApC,qBACKU,OADL,CACaC,eADb,EAEK0B,GAFL,WAEYtC,QAFZ,2BAEqC+B,KAFrC,GAGKjB,GAHL,CAGS,QAHT,EAGmB,kBAHnB,EAIKC,IAJL,GAKKC,GALL,CAKS,UAACC,GAAD,EAAMC,GAAN,EAAc;AACfd,MAAAA,MAAM,CAACc,GAAG,CAACC,MAAL,CAAN,CAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACAjB,MAAAA,MAAM,CAACc,GAAG,CAACI,IAAJ,CAASQ,OAAV,CAAN,CAAyBV,EAAzB,CAA4BC,KAA5B,CAAkC,iCAAlC;AACAd,MAAAA,IAAI;AACP,KATL;AAUH,GAZC,CAAF;AAcAD,EAAAA,EAAE,CAAC,uEAAD,EAA0E,UAAAC,IAAI,EAAI;AAChF;AACA,QAAMwB,KAAK,GAAGC,yBAAIC,IAAJ,CAAS;AAAEP,MAAAA,EAAE,EAAE;AAAN,KAAT,EAAoB,eAApB,EAAqC;AAAEW,MAAAA,SAAS,EAAE;AAAb,KAArC,CAAd;;AACApC,qBACKU,OADL,CACaC,eADb,EAEK0B,GAFL,WAEYtC,QAFZ,2BAEqC+B,KAFrC,GAGKjB,GAHL,CAGS,QAHT,EAGmB,kBAHnB,EAIKC,IAJL,GAKKC,GALL,CAKS,UAACC,GAAD,EAAMC,GAAN,EAAc;AACfd,MAAAA,MAAM,CAACc,GAAG,CAACC,MAAL,CAAN,CAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACAd,MAAAA,IAAI;AACP,KARL;AASH,GAZC,CAAF;AAcAD,EAAAA,EAAE,CAAC,yCAAD,EAA4C,UAAAC,IAAI,EAAI;AAAA,QAC1CC,QAD0C,GACnBC,mBADmB,CAC1CD,QAD0C;AAAA,QAChCqB,QADgC,GACnBpB,mBADmB,CAChCoB,QADgC;;AAElD5B,qBACKU,OADL,CACaC,eADb,EAEKC,IAFL,WAEab,QAFb,aAGKc,GAHL,CAGS,QAHT,EAGmB,kBAHnB,EAIKC,IAJL,CAIU;AAAEP,MAAAA,QAAQ,EAARA,QAAF;AAAYqB,MAAAA,QAAQ,EAARA;AAAZ,KAJV,EAKKb,GALL,CAKS,UAACC,GAAD,EAAMC,GAAN,EAAc;AACfd,MAAAA,MAAM,CAACc,GAAG,CAACC,MAAL,CAAN,CAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACAjB,MAAAA,MAAM,CAACc,GAAG,CAACI,IAAJ,CAASQ,OAAV,CAAN,CAAyBV,EAAzB,CAA4BC,KAA5B,CAAkC,yBAAlC;AACAd,MAAAA,IAAI;AACP,KATL;AAUH,GAZC,CAAF;AAcAD,EAAAA,EAAE,CAAC,iEAAD,EAAoE,UAAAC,IAAI,EAAI;AAC1EN,qBACKU,OADL,CACaC,eADb,EAEKC,IAFL,WAEab,QAFb,aAGKc,GAHL,CAGS,QAHT,EAGmB,kBAHnB,EAIKC,IAJL,GAKKC,GALL,CAKS,UAACC,GAAD,EAAMC,GAAN,EAAc;AACfd,MAAAA,MAAM,CAACc,GAAG,CAACC,MAAL,CAAN,CAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACAd,MAAAA,IAAI;AACP,KARL;AASH,GAVC,CAAF;AAYAD,EAAAA,EAAE,CAAC,+CAAD,EAAkD,UAAAC,IAAI,EAAI;AACxDN,qBACKU,OADL,CACaC,eADb,EAEK2B,GAFL,WAEYvC,QAFZ,cAGKwC,MAHL,CAGY,OAHZ,EAGqBC,eAAGC,YAAH,CAAgB,gCAAhB,CAHrB,EAGwE,aAHxE,EAIK1B,GAJL,CAIS,UAACC,GAAD,EAAMC,GAAN,EAAc;AACfd,MAAAA,MAAM,CAACc,GAAG,CAACC,MAAL,CAAN,CAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACAjB,MAAAA,MAAM,CAACc,GAAG,CAACI,IAAJ,CAASqB,KAAV,CAAN,CAAuBvB,EAAvB,CAA0BC,KAA1B,CAAgC,wCAAhC;AACAd,MAAAA,IAAI;AACP,KARL;AASH,GAVC,CAAF;AAYAD,EAAAA,EAAE,CAAC,yCAAD,EAA4C,UAAAC,IAAI,EAAI;AAClD,QAAMwB,KAAK,GAAGC,yBAAIC,IAAJ,CAAS;AAAEP,MAAAA,EAAE,EAAE;AAAN,KAAT,EAAoBQ,OAAO,CAACC,GAAR,CAAYC,OAAhC,EAAyC;AAAEC,MAAAA,SAAS,EAAE;AAAb,KAAzC,CAAd;;AACApC,qBACKU,OADL,CACaC,eADb,EAEK2B,GAFL,WAEYvC,QAFZ,cAGKc,GAHL,CAGS,eAHT,mBAGoCiB,KAHpC,GAIKS,MAJL,CAIY,OAJZ,EAIqBC,eAAGC,YAAH,CAAgB,gCAAhB,CAJrB,EAIwE,aAJxE,EAKK1B,GALL,CAKS,UAACC,GAAD,EAAMC,GAAN,EAAc;AACfd,MAAAA,MAAM,CAACc,GAAG,CAACC,MAAL,CAAN,CAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACAjB,MAAAA,MAAM,CAACc,GAAG,CAACI,IAAJ,CAASQ,OAAV,CAAN,CAAyBV,EAAzB,CAA4BC,KAA5B,CAAkC,+BAAlC;AACAd,MAAAA,IAAI;AACP,KATL;AAUH,GAZC,CAAF;AAcAD,EAAAA,EAAE,CAAC,mCAAD,EAAsC,UAAAC,IAAI,EAAI;AAC5C,QAAMwB,KAAK,GAAGC,yBAAIC,IAAJ,CAAS;AAAEP,MAAAA,EAAE,EAAE;AAAN,KAAT,EAAoBQ,OAAO,CAACC,GAAR,CAAYC,OAAhC,EAAyC;AAAEC,MAAAA,SAAS,EAAE;AAAb,KAAzC,CAAd;;AACApC,qBACKU,OADL,CACaC,eADb,EAEK0B,GAFL,WAEYtC,QAFZ,UAGKc,GAHL,CAGS,eAHT,mBAGoCiB,KAHpC,GAIKf,GAJL,CAIS,UAACC,GAAD,EAAMC,GAAN,EAAc;AACfd,MAAAA,MAAM,CAACc,GAAG,CAACC,MAAL,CAAN,CAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACAjB,MAAAA,MAAM,CAACc,GAAG,CAACI,IAAJ,CAASQ,OAAV,CAAN,CAAyBV,EAAzB,CAA4BC,KAA5B,CAAkC,SAAlC;AACAd,MAAAA,IAAI;AACP,KARL;AASH,GAXC,CAAF;AAaAD,EAAAA,EAAE,CAAC,mDAAD,EAAsD,UAAAC,IAAI,EAAI;AAC5D,QAAMwB,KAAK,GAAGC,yBAAIC,IAAJ,CAAS;AAAEP,MAAAA,EAAE,EAAE;AAAN,KAAT,EAAoBQ,OAAO,CAACC,GAAR,CAAYC,OAAhC,EAAyC;AAAEC,MAAAA,SAAS,EAAE;AAAb,KAAzC,CAAd;;AACA,QAAMO,cAAc,GAAG;AACnBC,MAAAA,GAAG,EAAE,oBADc;AAEnBC,MAAAA,MAAM,EAAE;AAFW,KAAvB;;AAKA7C,qBACKU,OADL,CACaC,eADb,EAEKmC,KAFL,WAEc/C,QAFd,oBAGKc,GAHL,CAGS,eAHT,mBAGoCiB,KAHpC,GAIKhB,IAJL,CAIU6B,cAJV,EAKK5B,GALL,CAKS,UAACC,GAAD,EAAMC,GAAN,EAAc;AACfd,MAAAA,MAAM,CAACc,GAAG,CAACC,MAAL,CAAN,CAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACAjB,MAAAA,MAAM,CAACc,GAAG,CAACI,IAAJ,CAASQ,OAAV,CAAN,CAAyBV,EAAzB,CAA4BC,KAA5B,CAAkC,yBAAlC;AACAd,MAAAA,IAAI;AACP,KATL;AAUH,GAjBC,CAAF;AAmBAD,EAAAA,EAAE,CAAC,oBAAD,EAAuB,UAAAC,IAAI,EAAI;AAC7B,QAAMwB,KAAK,GAAGC,yBAAIC,IAAJ,CAAS;AAAEP,MAAAA,EAAE,EAAE;AAAN,KAAT,EAAoBQ,OAAO,CAACC,GAAR,CAAYC,OAAhC,EAAyC;AAAEC,MAAAA,SAAS,EAAE;AAAb,KAAzC,CAAd;;AACA,QAAMO,cAAc,GAAG;AACnBC,MAAAA,GAAG,EAAE,oBADc;AAEnBG,MAAAA,GAAG,EAAE;AAFc,KAAvB;;AAKA/C,qBACKU,OADL,CACaC,eADb,EAEKmC,KAFL,WAEc/C,QAFd,oBAGKc,GAHL,CAGS,eAHT,mBAGoCiB,KAHpC,GAIKhB,IAJL,CAIU6B,cAJV,EAKK5B,GALL,CAKS,UAACC,GAAD,EAAMC,GAAN,EAAc;AACfd,MAAAA,MAAM,CAACc,GAAG,CAACC,MAAL,CAAN,CAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACAjB,MAAAA,MAAM,CAACc,GAAG,CAACI,IAAJ,CAASQ,OAAV,CAAN,CAAyBV,EAAzB,CAA4BC,KAA5B,CAAkC,2BAAlC;AACAd,MAAAA,IAAI;AACP,KATL;AAUH,GAjBC,CAAF;AAmBAD,EAAAA,EAAE,CAAC,qEAAD,EAAwE,UAAAC,IAAI,EAAI;AAC9E;AACA,QAAMwB,KAAK,GAAGC,yBAAIC,IAAJ,CAAS;AAAEP,MAAAA,EAAE,EAAE;AAAN,KAAT,EAAoBQ,OAAO,CAACC,GAAR,CAAYC,OAAhC,EAAyC;AAAEC,MAAAA,SAAS,EAAE;AAAb,KAAzC,CAAd;;AACA,QAAMO,cAAc,GAAG;AACnBC,MAAAA,GAAG,EAAE,oBADc;AAEnBG,MAAAA,GAAG,EAAE;AAFc,KAAvB;;AAKA/C,qBACKU,OADL,CACaC,eADb,EAEKmC,KAFL,WAEc/C,QAFd,oBAGKc,GAHL,CAGS,eAHT,mBAGoCiB,KAHpC,GAIKhB,IAJL,CAIU6B,cAJV,EAKK5B,GALL,CAKS,UAACC,GAAD,EAAMC,GAAN,EAAc;AACfd,MAAAA,MAAM,CAACc,GAAG,CAACC,MAAL,CAAN,CAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACAd,MAAAA,IAAI;AACP,KARL;AASH,GAjBC,CAAF;AAkBH,CAhNO,CAAR","sourcesContent":["/* eslint-disable no-undef */\nimport chai from 'chai'\nimport chaiHttp from 'chai-http'\nimport 'chai/register-should'\nimport jwt from 'jsonwebtoken'\nimport fs from 'fs'\nimport app from '../app'\nimport { validUser, invalidUser, invalidDataUser } from './testData'\n\nconst usersUrl = '/api/v1/users'\n\nchai.use(chaiHttp)\nconst { expect } = chai\n\ndescribe('Testing the user endpoints:', () => {\n    it('should create a user', done => {\n        const { username, email } = validUser\n        chai\n            .request(app)\n            .post(usersUrl)\n            .set('Accept', 'application/json')\n            .send(validUser)\n            .end((err, res) => {\n                expect(res.status).to.equal(201)\n                expect(res.body.data.user).to.include({\n                    id: 1,\n                    username,\n                    email,\n                })\n                done()\n            })\n    })\n\n    it('Should not create a user with incomplete required fields', done => {\n        chai\n            .request(app)\n            .post(usersUrl)\n            .set('Accept', 'application/json')\n            .send(invalidUser)\n            .end((err, res) => {\n                expect(res.status).to.equal(400)\n                expect(res.body.status).to.equal('error')\n                done()\n            })\n    })\n\n    it('Should throw an error is something wrong happens while creating a user', done => {\n        // In this test case, we are trying to create a user with an invalid email address.\n        chai\n            .request(app)\n            .post(usersUrl)\n            .set('Accept', 'application/json')\n            .send(invalidDataUser)\n            .end((err, res) => {\n                expect(res.status).to.equal(400)\n                done()\n            })\n    })\n\n    it('Should not login an unverified account', done => {\n        const { username, password } = validUser\n        chai\n            .request(app)\n            .post(`${usersUrl}/login`)\n            .set('Accept', 'application/json')\n            .send({ username, password })\n            .end((err, res) => {\n                expect(res.status).to.equal(400)\n                expect(res.body.message).to.equal('Please verify your account.')\n                done()\n            })\n    })\n\n    it('Should verify an account', done => {\n        const token = jwt.sign({ id: 1 }, process.env.JWT_KEY, { expiresIn: '1h' })\n        chai\n            .request(app)\n            .get(`${usersUrl}/confirmation/${token}`)\n            .set('Accept', 'application/json')\n            .send()\n            .end((err, res) => {\n                expect(res.status).to.equal(200)\n                expect(res.body.message).to.equal('Account activated successfully!')\n                done()\n            })\n    })\n\n    it('Should throw an error if something happens while verifying an account', done => {\n        // In this test case we are trying to use a wrong JWT_KEY than the one that was used to create the Token.\n        const token = jwt.sign({ id: 1 }, 'wrong_jwt_key', { expiresIn: '1h' })\n        chai\n            .request(app)\n            .get(`${usersUrl}/confirmation/${token}`)\n            .set('Accept', 'application/json')\n            .send()\n            .end((err, res) => {\n                expect(res.status).to.equal(400)\n                done()\n            })\n    })\n\n    it('Should login an with a verified account', done => {\n        const { username, password } = validUser\n        chai\n            .request(app)\n            .post(`${usersUrl}/login`)\n            .set('Accept', 'application/json')\n            .send({ username, password })\n            .end((err, res) => {\n                expect(res.status).to.equal(200)\n                expect(res.body.message).to.equal('Logged in successfully!')\n                done()\n            })\n    })\n\n    it('Should throw an error if username and password are not provided', done => {\n        chai\n            .request(app)\n            .post(`${usersUrl}/login`)\n            .set('Accept', 'application/json')\n            .send()\n            .end((err, res) => {\n                expect(res.status).to.equal(400)\n                done()\n            })\n    })\n\n    it('should not upload avatar by unauthorized user', done => {\n        chai\n            .request(app)\n            .put(`${usersUrl}/avatar`)\n            .attach('image', fs.readFileSync('src/tests/fixtures/andela2.jpg'), 'andela2.png')\n            .end((err, res) => {\n                expect(res.status).to.equal(401)\n                expect(res.body.error).to.equal('Not authorized to access this resource')\n                done()\n            })\n    })\n\n    it('should upload avatar by authorized user', done => {\n        const token = jwt.sign({ id: 1 }, process.env.JWT_KEY, { expiresIn: '1h' })\n        chai\n            .request(app)\n            .put(`${usersUrl}/avatar`)\n            .set('Authorization', `Bearer ${token}`)\n            .attach('image', fs.readFileSync('src/tests/fixtures/andela2.jpg'), 'andela2.png')\n            .end((err, res) => {\n                expect(res.status).to.equal(200)\n                expect(res.body.message).to.equal('Avatar Uploaded successfully!')\n                done()\n            })\n    })\n\n    it('should fetch current user profile', done => {\n        const token = jwt.sign({ id: 1 }, process.env.JWT_KEY, { expiresIn: '1h' })\n        chai\n            .request(app)\n            .get(`${usersUrl}/me`)\n            .set('Authorization', `Bearer ${token}`)\n            .end((err, res) => {\n                expect(res.status).to.equal(200)\n                expect(res.body.message).to.equal('success')\n                done()\n            })\n    })\n    \n    it('should not edit user with invalid attribute names', done => {\n        const token = jwt.sign({ id: 1 }, process.env.JWT_KEY, { expiresIn: '1h' })\n        const newUserDetails = {\n            bio: 'This is a test bio',\n            school: 'This attribute should not be there.',\n        }\n\n        chai\n            .request(app)\n            .patch(`${usersUrl}/profile/edit`)\n            .set('Authorization', `Bearer ${token}`)\n            .send(newUserDetails)\n            .end((err, res) => {\n                expect(res.status).to.equal(400)\n                expect(res.body.message).to.equal('Invalid update options!')\n                done()\n            })\n    })\n\n    it('should edit a user', done => {\n        const token = jwt.sign({ id: 1 }, process.env.JWT_KEY, { expiresIn: '1h' })\n        const newUserDetails = {\n            bio: 'This is a test bio',\n            dob: '04/02/2012',\n        }\n\n        chai\n            .request(app)\n            .patch(`${usersUrl}/profile/edit`)\n            .set('Authorization', `Bearer ${token}`)\n            .send(newUserDetails)\n            .end((err, res) => {\n                expect(res.status).to.equal(200)\n                expect(res.body.message).to.equal('User updated successfully')\n                done()\n            })\n    })\n\n    it('should throw an error if something goes wrong while updating a user', done => {\n        // In this test case, We are passing date of birth as a string so we expect an error to happen.\n        const token = jwt.sign({ id: 1 }, process.env.JWT_KEY, { expiresIn: '1h' })\n        const newUserDetails = {\n            bio: 'This is a test bio',\n            dob: 'this is not a date',\n        }\n\n        chai\n            .request(app)\n            .patch(`${usersUrl}/profile/edit`)\n            .set('Authorization', `Bearer ${token}`)\n            .send(newUserDetails)\n            .end((err, res) => {\n                expect(res.status).to.equal(400)\n                done()\n            })\n    })\n})\n"],"file":"user.test.js"}