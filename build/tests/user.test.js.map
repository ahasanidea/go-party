{"version":3,"sources":["../../src/tests/user.test.js"],"names":["usersUrl","chai","use","chaiHttp","expect","describe","it","done","username","validUser","email","request","app","post","set","send","end","err","res","status","to","equal","body","data","user","include","id","invalidUser","password","message","token","jwt","sign","process","env","JWT_KEY","expiresIn","get","put","attach","fs","readFileSync","error"],"mappings":"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","sourcesContent":["/* eslint-disable no-undef */\nimport chai from 'chai'\nimport chaiHttp from 'chai-http'\nimport 'chai/register-should'\nimport jwt from 'jsonwebtoken'\nimport fs from 'fs'\nimport app from '../app'\nimport { validUser, invalidUser } from './testData'\n\nconst usersUrl = '/api/v1/users'\n\nchai.use(chaiHttp)\nconst { expect } = chai\n\ndescribe('Testing the user endpoints:', () => {\n    it('should create a user', done => {\n        const { username, email } = validUser\n        chai\n            .request(app)\n            .post(usersUrl)\n            .set('Accept', 'application/json')\n            .send(validUser)\n            .end((err, res) => {\n                expect(res.status).to.equal(201)\n                expect(res.body.data.user).to.include({\n                    id: 1,\n                    username,\n                    email,\n                })\n                done()\n            })\n    })\n\n    it('Should not create a user with incomplete required fields', done => {\n        chai\n            .request(app)\n            .post(usersUrl)\n            .set('Accept', 'application/json')\n            .send(invalidUser)\n            .end((err, res) => {\n                expect(res.status).to.equal(400)\n                expect(res.body.status).to.equal('error')\n                done()\n            })\n    })\n\n    it('Should not login an unverified account', done => {\n        const { username, password } = validUser\n        chai\n            .request(app)\n            .post(`${usersUrl}/login`)\n            .set('Accept', 'application/json')\n            .send({ username, password })\n            .end((err, res) => {\n                expect(res.status).to.equal(400)\n                expect(res.body.message).to.equal('Please verify your account.')\n                done()\n            })\n    })\n\n    it('Should varify an account', done => {\n        const token = jwt.sign({ id: 1 }, process.env.JWT_KEY, { expiresIn: '1h' })\n        chai\n            .request(app)\n            .get(`${usersUrl}/confirmation/${token}`)\n            .set('Accept', 'application/json')\n            .send()\n            .end((err, res) => {\n                expect(res.status).to.equal(200)\n                expect(res.body.message).to.equal('Account activated successfully!')\n                done()\n            })\n    })\n\n    it('Should login an with a verified account', done => {\n        const { username, password } = validUser\n        chai\n            .request(app)\n            .post(`${usersUrl}/login`)\n            .set('Accept', 'application/json')\n            .send({ username, password })\n            .end((err, res) => {\n                expect(res.status).to.equal(200)\n                expect(res.body.message).to.equal('Logged in successfully!')\n                done()\n            })\n    })\n\n    it('should not upload avatar by unauthorized user', done => {\n        chai\n            .request(app)\n            .put(`${usersUrl}/avatar`)\n            .attach('image', fs.readFileSync('src/tests/fixtures/andela2.jpg'), 'andela2.png')\n            .end((err, res) => {\n                expect(res.status).to.equal(401)\n                expect(res.body.error).to.equal('Not authorized to access this resource')\n                done()\n            })\n    })\n\n    it('should upload avatar by authorized user', done => {\n        const token = jwt.sign({ id: 1 }, process.env.JWT_KEY, { expiresIn: '1h' })\n        chai\n            .request(app)\n            .put(`${usersUrl}/avatar`)\n            .set('Authorization', `Bearer ${token}`)\n            .attach('image', fs.readFileSync('src/tests/fixtures/andela2.jpg'), 'andela2.png')\n            .end((err, res) => {\n                expect(res.status).to.equal(200)\n                expect(res.body.message).to.equal('Avatar Uploaded successfully!')\n                done()\n            })\n    })\n})\n"],"file":"user.test.js"}