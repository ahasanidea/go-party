{"version":3,"sources":["../../src/tests/request.test.js"],"names":["partyUrl","usersUrl","chai","use","chaiHttp","expect","describe","token","jwt","sign","id","validUser","process","env","JWT_KEY","expiresIn","it","request","app","post","set","send","validRequest","res","status","to","equal","body","message","data","get","localToken","patch","done","end","err"],"mappings":"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","sourcesContent":["/* eslint-disable no-undef */\nimport chai from 'chai'\nimport chaiHttp from 'chai-http'\nimport 'chai/register-should'\nimport jwt from 'jsonwebtoken'\nimport app from '../app'\nimport { populateUser, populateParty, validRequest, validUser, mochAsync, populateInitialParty } from './testData'\n\nconst partyUrl = '/api/v1/parties'\nconst usersUrl = '/api/v1/users'\n\nchai.use(chaiHttp)\nconst { expect } = chai\n\ndescribe('Testing the party requests endpoints', () => {\n    const token = jwt.sign({ id: validUser.id }, process.env.JWT_KEY, { expiresIn: '1h' })\n    it(\n        'Should send a party request',\n        mochAsync(async () => {\n            await populateUser()\n            await populateParty()\n            await populateInitialParty()\n            let res = await chai\n                .request(app)\n                .post(`${partyUrl}/2/requests`)\n                .set('Authorization', `Bearer ${token}`)\n                .send(validRequest)\n            expect(res.status).to.equal(201)\n            expect(res.body.message).to.equal('Request successfully sent')\n            expect(res.body.data.status).to.equal('pending')\n        })\n    )\n\n    it(\n        'Should throw a 404 if the party does not exist',\n        mochAsync(async () => {\n            let res = await chai\n                .request(app)\n                .post(`${partyUrl}/4/requests`)\n                .set('Authorization', `Bearer ${token}`)\n                .send(validRequest)\n            expect(res.status).to.equal(404)\n            expect(res.body.message).to.equal('The party you are requesting to attend does not exist.')\n        })\n    )\n\n    it(\n        'Should throw a 400 when a user requests to attend their own party',\n        mochAsync(async () => {\n            let res = await chai\n                .request(app)\n                .post(`${partyUrl}/1/requests`)\n                .set('Authorization', `Bearer ${token}`)\n                .send(validRequest)\n            expect(res.status).to.equal(400)\n            expect(res.body.message).to.equal('You cannot request to attend your own party.')\n        })\n    )\n\n    it(\n        'Should throw a 400 when a user requests to attend a party that they have already requested to attend',\n        mochAsync(async () => {\n            let res = await chai\n                .request(app)\n                .post(`${partyUrl}/2/requests`)\n                .set('Authorization', `Bearer ${token}`)\n                .send(validRequest)\n            expect(res.status).to.equal(400)\n            expect(res.body.message).to.equal('You have already requested to attend this party.')\n        })\n    )\n\n    it(\n        'Should throw a 400 when something wrong happens trying to send a party request',\n        mochAsync(async () => {\n            let res = await chai\n                .request(app)\n                // The url expects an integer but a string is provided\n                .post(`${partyUrl}/invaliddata/requests`)\n                .set('Authorization', `Bearer ${token}`)\n                .send(validRequest)\n            expect(res.status).to.equal(400)\n            expect(res.body.status).to.equal('error')\n        })\n    )\n\n    it(\n        'Should get party requests',\n        mochAsync(async () => {\n            let res = await chai\n                .request(app)\n                .get(`${partyUrl}/1/requests`)\n                .set('Authorization', `Bearer ${token}`)\n                .send()\n            expect(res.status).to.equal(200)\n            expect(res.body.message).to.equal('Party requests')\n        })\n    )\n\n    it(\n        'Should throw a 404 if a party to fetch requests from is not found',\n        mochAsync(async () => {\n            let res = await chai\n                .request(app)\n                .get(`${partyUrl}/5/requests`)\n                .set('Authorization', `Bearer ${token}`)\n                .send()\n            expect(res.status).to.equal(404)\n            expect(res.body.message).to.equal('Party does not exist.')\n        })\n    )\n\n    it(\n        'Should throw a 400 if a user tries to fetch requests for a party they did not create.',\n        mochAsync(async () => {\n            const localToken = jwt.sign({ id: 2 }, process.env.JWT_KEY, { expiresIn: '1h' })\n            let res = await chai\n                .request(app)\n                .get(`${partyUrl}/1/requests`)\n                .set('Authorization', `Bearer ${localToken}`)\n                .send()\n            expect(res.status).to.equal(400)\n            expect(res.body.message).to.equal('You can only view requests for parties you created.')\n        })\n    )\n\n    it(\n        'Should throw a 400 if anything goes wrong while fetching party requests.',\n        mochAsync(async () => {\n            let res = await chai\n                .request(app)\n                // The url expects an integer but a string is provided\n                .get(`${partyUrl}/invalidInput/requests`)\n                .set('Authorization', `Bearer ${token}`)\n                .send()\n            expect(res.status).to.equal(400)\n            expect(res.body.status).to.equal('error')\n        })\n    )\n\n    it(\n        'Should accept a party request',\n        mochAsync(async () => {\n            let res = await chai\n                .request(app)\n                .patch(`${partyUrl}/1/requests/1/accepted`)\n                .set('Authorization', `Bearer ${token}`)\n                .send()\n            expect(res.status).to.equal(200)\n            expect(res.body.message).to.equal('Party request altered.')\n        })\n    )\n\n    it(\n        'Should throw a 404 if the party with the request does not exist',\n        mochAsync(async () => {\n            let res = await chai\n                .request(app)\n                .patch(`${partyUrl}/100/requests/1/accepted`)\n                .set('Authorization', `Bearer ${token}`)\n                .send()\n            expect(res.status).to.equal(404)\n            expect(res.body.message).to.equal('Party with that request does not exist.')\n        })\n    )\n\n    it(\n        'Should throw a 400 if a user tries to alter a request to a party they did not create',\n        mochAsync(async () => {\n            const localToken = jwt.sign({ id: 2 }, process.env.JWT_KEY, { expiresIn: '1h' })\n            let res = await chai\n                .request(app)\n                .patch(`${partyUrl}/1/requests/1/accepted`)\n                .set('Authorization', `Bearer ${localToken}`)\n                .send()\n            expect(res.status).to.equal(400)\n            expect(res.body.message).to.equal('You cannot alter a request for a party you did not create.')\n        })\n    )\n\n    it(\n        'Should throw a 404 if a request being altered does not exist.',\n        mochAsync(async () => {\n            let res = await chai\n                .request(app)\n                .patch(`${partyUrl}/1/requests/2/accepted`)\n                .set('Authorization', `Bearer ${token}`)\n                .send()\n            expect(res.status).to.equal(404)\n            expect(res.body.message).to.equal('The request you are trying to alter does not exist.')\n        })\n    )\n\n    it(\n        'Should throw a 400 if something wrong happens while altering a request.',\n        mochAsync(async () => {\n            let res = await chai\n                .request(app)\n                // We are passing a parameter `notallowed` that our route database does not expect\n                .patch(`${partyUrl}/1/requests/1/notallowed`)\n                .set('Authorization', `Bearer ${token}`)\n                .send()\n            expect(res.status).to.equal(400)\n            expect(res.body.status).to.equal('error')\n        })\n    )\n\n    it('should throw a 400 if a user tries to get guests to a party they did not create', done => {\n        const localToken = jwt.sign({ id: 2 }, process.env.JWT_KEY, { expiresIn: '1h' })\n        chai\n            .request(app)\n            .get(`${partyUrl}/1/guests`)\n            .set('Authorization', `Bearer ${localToken}`)\n            .send()\n            .end((err, res) => {\n                expect(res.status).to.equal(400)\n                expect(res.body.message).to.equal('You can only view requests for a party you created.')\n                done()\n            })\n    })\n\n    it(\n        'Should successfully withdraw a party request',\n        mochAsync(async () => {\n            let res = await chai\n                .request(app)\n                .delete(`${usersUrl}/me/requests/1`)\n                .set('Authorization', `Bearer ${token}`)\n                .send()\n            expect(res.status).to.equal(200)\n            expect(res.body.message).to.equal('Party request successfully withdrawn')\n        })\n    )\n\n    it(\n        'Should throw a 404 if a request does not exist.',\n        mochAsync(async () => {\n            let res = await chai\n                .request(app)\n                .delete(`${usersUrl}/me/requests/4`)\n                .set('Authorization', `Bearer ${token}`)\n                .send()\n            expect(res.status).to.equal(404)\n            expect(res.body.message).to.equal('That party request does not exist.')\n        })\n    )\n\n    it(\n        'Should throw a 400 when something goes wrong trying to withdraw a party request',\n        mochAsync(async () => {\n            let res = await chai\n                .request(app)\n                // The url expects an integer for request id but a string is provided\n                .delete(`${usersUrl}/me/requests/invalidrequestid`)\n                .set('Authorization', `Bearer ${token}`)\n                .send()\n            expect(res.status).to.equal(400)\n            expect(res.body.status).to.equal('error')\n        })\n    )\n})\n"],"file":"request.test.js"}