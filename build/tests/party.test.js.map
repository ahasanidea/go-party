{"version":3,"sources":["../../src/tests/party.test.js"],"names":["partyUrl","chai","use","chaiHttp","expect","describe","token","jwt","sign","id","validUser","process","env","JWT_KEY","expiresIn","it","done","request","app","post","set","send","validParty","end","err","res","status","to","equal","invalidParty","body","invalidDataParty","get","data","count","message"],"mappings":"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","sourcesContent":["/* eslint-disable no-undef */\nimport chai from 'chai'\nimport chaiHttp from 'chai-http'\nimport 'chai/register-should'\nimport jwt from 'jsonwebtoken'\nimport app from '../app'\nimport { validParty, invalidParty, validUser, invalidDataParty } from './testData'\n\nconst partyUrl = '/api/v1/parties'\n\nchai.use(chaiHttp)\nconst { expect } = chai\n\ndescribe('Testing the party endpoints', () => {\n    const token = jwt.sign({ id: validUser.id }, process.env.JWT_KEY, { expiresIn: '1h' })\n    it('should create a party', done => {\n        chai\n            .request(app)\n            .post(partyUrl)\n            .set('Authorization', `Bearer ${token}`)\n            .send(validParty)\n            .end((err, res) => {\n                expect(res.status).to.equal(201)\n            })\n        done()\n    })\n\n    it('Should not create a party with incomplete required fields', done => {\n        chai\n            .request(app)\n            .post(partyUrl)\n            .set('Authorization', `Bearer ${token}`)\n            .send(invalidParty)\n            .end((err, res) => {\n                expect(res.status).to.equal(400)\n                expect(res.body.status).to.equal('error')\n                done()\n            })\n    })\n\n    it('Should throw an error if something wrong happens while creating a party', done => {\n        // In this test case, we are trying to create a party with an invalid title.\n        chai\n            .request(app)\n            .post(partyUrl)\n            .set('Authorization', `Bearer ${token}`)\n            .send(invalidDataParty)\n            .end((err, res) => {\n                expect(res.status).to.equal(400)\n                done()\n            })\n    })\n\n    it('Should fetch parties for a given user', done => {\n        chai\n            .request(app)\n            .get(`${partyUrl}/createdby/1`)\n            .send()\n            .end((err, res) => {\n                expect(res.status).to.equal(200)\n                expect(res.body.data.count).to.equal(1)\n                done()\n            })\n    })\n\n    it('Should throw an error when something goes wrong while fetching user parties', done => {\n        chai\n            .request(app)\n        //In this test case, we are trying to provide a string as a parameter but am integer is expected. Therefore, an error will be thrown and our test will pass.\n            .get(`${partyUrl}/createdby/invalidstringinput`)\n            .send()\n            .end((err, res) => {\n                expect(res.status).to.equal(400)\n                expect(res.body.status).to.equal('error')\n                done()\n            })\n    })\n\n    it('Should view details of a single party', done => {\n        chai\n            .request(app)\n            .get(`${partyUrl}/1`)\n            .send()\n            .end((err, res) => {\n                expect(res.status).to.equal(200)\n                expect(res.body.message).to.equal('Single party')\n                done()\n            })\n    })\n\n    it('Should throw 404 if party is not found', done => {\n        chai\n            .request(app)\n            .get(`${partyUrl}/50`)\n            .send()\n            .end((err, res) => {\n                expect(res.status).to.equal(404)\n                expect(res.body.message).to.equal('Party not found')\n                done()\n            })\n    })\n\n    it('Should throw 400 if something wrong happens while fetching a party', done => {\n        chai\n            .request(app)\n        // Tring to pass an invalid data type of party id will throw a 400 error\n            .get(`${partyUrl}/invaliddata`)\n            .send()\n            .end((err, res) => {\n                expect(res.status).to.equal(400)\n                expect(res.body.status).to.equal('error')\n                done()\n            })\n    })\n})\n"],"file":"party.test.js"}