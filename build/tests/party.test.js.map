{"version":3,"sources":["../../src/tests/party.test.js"],"names":["partyUrl","chai","use","chaiHttp","expect","describe","token","jwt","sign","id","validUser","process","env","JWT_KEY","expiresIn","it","done","request","app","post","set","send","validParty","end","err","res","status","to","equal","invalidParty","body","invalidDataParty","get","data","count","message","editData","description","title","is_free","party_date","patch","address"],"mappings":"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","sourcesContent":["/* eslint-disable no-undef */\nimport chai from 'chai'\nimport chaiHttp from 'chai-http'\nimport 'chai/register-should'\nimport jwt from 'jsonwebtoken'\nimport app from '../app'\nimport { validParty, invalidParty, validUser, invalidDataParty } from './testData'\n\nconst partyUrl = '/api/v1/parties'\n\nchai.use(chaiHttp)\nconst { expect } = chai\n\ndescribe('Testing the party endpoints', () => {\n    const token = jwt.sign({ id: validUser.id }, process.env.JWT_KEY, { expiresIn: '1h' })\n    it('should create a party', done => {\n        chai\n            .request(app)\n            .post(partyUrl)\n            .set('Authorization', `Bearer ${token}`)\n            .send(validParty)\n            .end((err, res) => {\n                expect(res.status).to.equal(201)\n            })\n        done()\n    })\n\n    it('Should not create a party with incomplete required fields', done => {\n        chai\n            .request(app)\n            .post(partyUrl)\n            .set('Authorization', `Bearer ${token}`)\n            .send(invalidParty)\n            .end((err, res) => {\n                expect(res.status).to.equal(400)\n                expect(res.body.status).to.equal('error')\n                done()\n            })\n    })\n\n    it('Should throw an error if something wrong happens while creating a party', done => {\n        // In this test case, we are trying to create a party with an invalid title.\n        chai\n            .request(app)\n            .post(partyUrl)\n            .set('Authorization', `Bearer ${token}`)\n            .send(invalidDataParty)\n            .end((err, res) => {\n                expect(res.status).to.equal(400)\n                done()\n            })\n    })\n\n    it('Should fetch parties for a given user', done => {\n        chai\n            .request(app)\n            .get(`${partyUrl}/createdby/1`)\n            .send()\n            .end((err, res) => {\n                expect(res.status).to.equal(200)\n                expect(res.body.data.count).to.equal(1)\n                done()\n            })\n    })\n\n    it('Should throw an error when something goes wrong while fetching user parties', done => {\n        chai\n            .request(app)\n        //In this test case, we are trying to provide a string as a parameter but am integer is expected. Therefore, an error will be thrown and our test will pass.\n            .get(`${partyUrl}/createdby/invalidstringinput`)\n            .send()\n            .end((err, res) => {\n                expect(res.status).to.equal(400)\n                expect(res.body.status).to.equal('error')\n                done()\n            })\n    })\n\n    it('Should view details of a single party', done => {\n        chai\n            .request(app)\n            .get(`${partyUrl}/1`)\n            .send()\n            .end((err, res) => {\n                expect(res.status).to.equal(200)\n                expect(res.body.message).to.equal('Single party')\n                done()\n            })\n    })\n\n    it('Should throw 404 if party is not found', done => {\n        chai\n            .request(app)\n            .get(`${partyUrl}/50`)\n            .send()\n            .end((err, res) => {\n                expect(res.status).to.equal(404)\n                expect(res.body.message).to.equal('Party not found')\n                done()\n            })\n    })\n\n    it('Should throw 400 if something wrong happens while fetching a party', done => {\n        chai\n            .request(app)\n        // Tring to pass an invalid data type of party id will throw a 400 error\n            .get(`${partyUrl}/invaliddata`)\n            .send()\n            .end((err, res) => {\n                expect(res.status).to.equal(400)\n                expect(res.body.status).to.equal('error')\n                done()\n            })\n    })\n\n    it('Should search a party by location', done => {\n        chai\n            .request(app)\n            .get(`${partyUrl}/search?location=test location 1`)\n            .send()\n            .end((err, res) => {\n                expect(res.status).to.equal(200)\n                expect(res.body.message).to.equal('Parties by location')\n                done()\n            })\n    })\n\n    it('Should edit a party', done => {\n        const editData = {\n            description: 'edited description',\n            title: 'edited title',\n            is_free: false,\n            party_date: '02:10:2020',\n        }\n        chai\n            .request(app)\n            .patch(`${partyUrl}/1`)\n            .set('Authorization', `Bearer ${token}`)\n            .send(editData)\n            .end((err, res) => {\n                expect(res.status).to.equal(200)\n                expect(res.body.data.title).to.equal('edited title')\n                done()\n            })\n    })\n\n    it('Should throw a 404 when a party to edit does not exist', done => {\n        const editData = {\n            description: 'edited description',\n            title: 'edited title',\n            is_free: false,\n            party_date: '02:10:2020',\n        }\n        chai\n            .request(app)\n            .patch(`${partyUrl}/4`)\n            .set('Authorization', `Bearer ${token}`)\n            .send(editData)\n            .end((err, res) => {\n                expect(res.status).to.equal(404)\n                expect(res.body.message).to.equal('Party not found')\n                done()\n            })\n    })\n\n    it('Should throw a 400 when an invalid update option is given', done => {\n        const editData = {\n            description: 'edited description',\n            title: 'edited title',\n            is_free: false,\n            party_date: '02:10:2020',\n            // address is an invalid update option. The app should therefore throw a 400 error.\n            address: 'invalid update option',\n        }\n        chai\n            .request(app)\n            .patch(`${partyUrl}/1`)\n            .set('Authorization', `Bearer ${token}`)\n            .send(editData)\n            .end((err, res) => {\n                expect(res.status).to.equal(400)\n                expect(res.body.message).to.equal('Invalid update options!')\n                done()\n            })\n    })\n\n    it('Should throw 400 if something wrong happens while updating a party', done => {\n        const editData = {\n            description: 'edited description',\n            title: 'edited title',\n            is_free: false,\n            party_date: '02:10:2020',\n        }\n        chai\n            .request(app)\n        // Trying to pass an invalid data type of party id will throw a 400 error\n            .patch(`${partyUrl}/invaliddata`)\n            .set('Authorization', `Bearer ${token}`)\n            .send(editData)\n            .end((err, res) => {\n                expect(res.status).to.equal(400)\n                expect(res.body.status).to.equal('error')\n                done()\n            })\n    })\n\n    it('should get party guests', done => {\n        chai\n            .request(app)\n            .get(`${partyUrl}/1/guests`)\n            .set('Authorization', `Bearer ${token}`)\n            .send()\n            .end((err, res) => {\n                expect(res.status).to.equal(200)\n                expect(res.body.message).to.equal('Party guests')\n                done()\n            })\n    })\n\n    it('should throw a 404 if a aparty does not exist', done => {\n        chai\n            .request(app)\n            .get(`${partyUrl}/4/guests`)\n            .set('Authorization', `Bearer ${token}`)\n            .send()\n            .end((err, res) => {\n                expect(res.status).to.equal(404)\n                expect(res.body.message).to.equal('A party with that id does not exist.')\n                done()\n            })\n    })\n\n    it('should throw a 400 if something goes wrong while fetching party guests', done => {\n        chai\n            .request(app)\n        // Route expects a number but a string is provided.\n            .get(`${partyUrl}/invalidinput/guests`)\n            .set('Authorization', `Bearer ${token}`)\n            .send()\n            .end((err, res) => {\n                expect(res.status).to.equal(400)\n                expect(res.body.status).to.equal('error')\n                done()\n            })\n    })\n\n    it('Should delete a party', done => {\n        chai\n            .request(app)\n            .delete(`${partyUrl}/1`)\n            .set('Authorization', `Bearer ${token}`)\n            .send()\n            .end((err, res) => {\n                expect(res.status).to.equal(200)\n                expect(res.body.message).to.equal('Party successfully deleted!')\n                done()\n            })\n    })\n\n    it('Should throw a 404 when a party to delete does not exist', done => {\n        chai\n            .request(app)\n            .delete(`${partyUrl}/4`)\n            .set('Authorization', `Bearer ${token}`)\n            .send()\n            .end((err, res) => {\n                expect(res.status).to.equal(404)\n                expect(res.body.message).to.equal('Attempting to delete a non-existing party.')\n                done()\n            })\n    })\n\n    it('Should throw 400 if something wrong happens while deleting a party', done => {\n        chai\n            .request(app)\n        // Trying to pass an invalid data type of party id will throw a 400 error\n            .delete(`${partyUrl}/invaliddata`)\n            .set('Authorization', `Bearer ${token}`)\n            .send()\n            .end((err, res) => {\n                expect(res.status).to.equal(400)\n                expect(res.body.status).to.equal('error')\n                done()\n            })\n    })\n})\n"],"file":"party.test.js"}