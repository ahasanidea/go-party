{"version":3,"sources":["../../src/controllers/RequestController.js"],"names":["util","Util","RequestController","req","res","user","party_id","params","PartyService","searchParty","party","setError","send","host_id","id","RequestService","checkRequestExists","request","newRequest","guest_id","sendPartyRequest","sentRequest","setSuccess","message"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA,IAAMA,IAAI,GAAG,IAAIC,iBAAJ,EAAb;;IAEMC,iB;;;;;;;;;;;;oDAC4BC,G,EAAKC,G;;;;;;AACzBC,gBAAAA,I,GAAOF,GAAG,CAACE,I;AACXC,gBAAAA,Q,GAAWH,GAAG,CAACI,MAAJ,CAAWD,Q;;;uBAEJE,yBAAaC,WAAb,CAAyBH,QAAzB,C;;;AAAdI,gBAAAA,K;;oBACDA,K;;;;;AACDV,gBAAAA,IAAI,CAACW,QAAL,CAAc,GAAd,EAAmB,wDAAnB;iDACOX,IAAI,CAACY,IAAL,CAAUR,GAAV,C;;;sBAEPM,KAAK,CAACG,OAAN,KAAkBR,IAAI,CAACS,E;;;;;AACvBd,gBAAAA,IAAI,CAACW,QAAL,CAAc,GAAd,EAAmB,8CAAnB;iDACOX,IAAI,CAACY,IAAL,CAAUR,GAAV,C;;;;uBAEWW,2BAAeC,kBAAf,CAAkCX,IAAI,CAACS,EAAvC,EAA2CJ,KAAK,CAACI,EAAjD,C;;;AAAhBG,gBAAAA,O;;qBACFA,O;;;;;AACAjB,gBAAAA,IAAI,CAACW,QAAL,CAAc,GAAd,EAAmB,kDAAnB;iDACOX,IAAI,CAACY,IAAL,CAAUR,GAAV,C;;;AAELc,gBAAAA,U,GAAa;AACfZ,kBAAAA,QAAQ,EAAEI,KAAK,CAACI,EADD;AAEfK,kBAAAA,QAAQ,EAAEd,IAAI,CAACS;AAFA,iB;;uBAIOC,2BAAeK,gBAAf,CAAgCF,UAAhC,C;;;AAApBG,gBAAAA,W;AACNrB,gBAAAA,IAAI,CAACsB,UAAL,CAAgB,GAAhB,EAAqB,2BAArB,EAAkDD,WAAlD;iDACOrB,IAAI,CAACY,IAAL,CAAUR,GAAV,C;;;;;AAEPJ,gBAAAA,IAAI,CAACW,QAAL,CAAc,GAAd,EAAmB,YAAMY,OAAzB;iDACOvB,IAAI,CAACY,IAAL,CAAUR,GAAV,C;;;;;;;;;;;;;;;;;;;;eAKJF,iB","sourcesContent":["import Util from '../utils/Utils'\nimport RequestService from '../services/RequestService'\nimport PartyService from '../services/PartyService'\nconst util = new Util()\n\nclass RequestController {\n    static async sendPartyRequest(req, res) {\n        const user = req.user\n        const party_id = req.params.party_id\n        try {\n            const party = await PartyService.searchParty(party_id)\n            if (!party) {\n                util.setError(404, 'The party you are requesting to attend does not exist.')\n                return util.send(res)\n            }\n            if (party.host_id === user.id) {\n                util.setError(400, 'You cannot request to attend your own party.')\n                return util.send(res)\n            }\n            const request = await RequestService.checkRequestExists(user.id, party.id)\n            if (request) {\n                util.setError(400, 'You have already requested to attend this party.')\n                return util.send(res)\n            }\n            const newRequest = {\n                party_id: party.id,\n                guest_id: user.id,\n            }\n            const sentRequest = await RequestService.sendPartyRequest(newRequest)\n            util.setSuccess(201, 'Request successfully sent', sentRequest)\n            return util.send(res)\n        } catch (error) {\n            util.setError(400, error.message)\n            return util.send(res)\n        }\n    }\n}\n\nexport default RequestController\n"],"file":"RequestController.js"}