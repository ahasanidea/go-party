{"version":3,"sources":["../../src/controllers/UserController.js"],"names":["util","Util","UserController","req","res","body","username","email","password","user","setError","send","UserService","addUser","createdUser","token","generateAuthToken","id","userData","setSuccess","message","file","content","uploader","upload","result","avatarUrl","url","uploadAvatar","findByCredentials"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA,IAAMA,IAAI,GAAG,IAAIC,iBAAJ,EAAb;;IAEMC,c;;;;;;;;;;;;oDACmBC,G,EAAKC,G;;;;;;;4BACgBD,GAAG,CAACE,I,EAAlCC,Q,aAAAA,Q,EAAUC,K,aAAAA,K,EAAOC,Q,aAAAA,Q;AACnBC,gBAAAA,I,GAAON,GAAG,CAACE,I;;sBACb,CAACC,QAAD,IAAa,CAACC,KAAd,IAAuB,CAACC,Q;;;;;AACxBR,gBAAAA,IAAI,CAACU,QAAL,CAAc,GAAd,EAAmB,6CAAnB;iDACOV,IAAI,CAACW,IAAL,CAAUP,GAAV,C;;;;;uBAGmBQ,wBAAYC,OAAZ,CAAoBJ,IAApB,C;;;AAApBK,gBAAAA,W;AACAC,gBAAAA,K,GAAQf,IAAI,CAACgB,iBAAL,CAAuBF,WAAW,CAACG,EAAnC,C;AACRC,gBAAAA,Q,GAAW;AAAET,kBAAAA,IAAI,EAAEK,WAAR;AAAqBC,kBAAAA,KAAK,EAALA;AAArB,iB;AACjBf,gBAAAA,IAAI,CAACmB,UAAL,CAAgB,GAAhB,EAAqB,eAArB,EAAsCD,QAAtC;iDACOlB,IAAI,CAACW,IAAL,CAAUP,GAAV,C;;;;;AAEPJ,gBAAAA,IAAI,CAACU,QAAL,CAAc,GAAd,EAAmB,YAAMU,OAAzB;iDACOpB,IAAI,CAACW,IAAL,CAAUP,GAAV,C;;;;;;;;;;;;;;;;;;;;;qDAIWD,G,EAAKC,G;;;;;;qBACvBD,GAAG,CAACkB,I;;;;;AACEA,gBAAAA,I,GAAO,qBAAQlB,GAAR,EAAamB,O;;;uBAEDC,2BAASC,MAAT,CAAgBH,IAAhB,C;;;AAAfI,gBAAAA,M;AACAC,gBAAAA,S,GAAYD,MAAM,CAACE,G;;uBACNf,wBAAYgB,YAAZ,CAAyBzB,GAAG,CAACM,IAAJ,CAASQ,EAAlC,EAAsCS,SAAtC,C;;;AAAbjB,gBAAAA,I;AACNT,gBAAAA,IAAI,CAACmB,UAAL,CAAgB,GAAhB,EAAqB,+BAArB,EAAsDV,IAAtD;kDACOT,IAAI,CAACW,IAAL,CAAUP,GAAV,C;;;;;AAEPJ,gBAAAA,IAAI,CAACU,QAAL,CAAc,GAAd,EAAmB,aAAMU,OAAzB;kDACOpB,IAAI,CAACW,IAAL,CAAUP,GAAV,C;;;;;;;;;;;;;;;;;;;;;qDAKYD,G,EAAKC,G;;;;;;;6BACDD,GAAG,CAACE,I,EAA3BC,Q,cAAAA,Q,EAAUE,Q,cAAAA,Q;;sBACd,CAACF,QAAD,IAAa,CAACE,Q;;;;;AACdR,gBAAAA,IAAI,CAACU,QAAL,CAAc,GAAd,EAAmB,qCAAnB;kDACOV,IAAI,CAACW,IAAL,CAAUP,GAAV,C;;;;;uBAGYQ,wBAAYiB,iBAAZ,CAA8BvB,QAA9B,EAAwCE,QAAxC,C;;;AAAbC,gBAAAA,I;AACAM,gBAAAA,K,GAAQf,IAAI,CAACgB,iBAAL,CAAuBP,IAAI,CAACQ,EAA5B,C;AACRC,gBAAAA,Q,GAAW;AAAET,kBAAAA,IAAI,EAAJA,IAAF;AAAQM,kBAAAA,KAAK,EAALA;AAAR,iB;AACjBf,gBAAAA,IAAI,CAACmB,UAAL,CAAgB,GAAhB,EAAqB,yBAArB,EAAgDD,QAAhD;kDACOlB,IAAI,CAACW,IAAL,CAAUP,GAAV,C;;;;;AAEPJ,gBAAAA,IAAI,CAACU,QAAL,CAAc,GAAd,EAAmB,aAAMU,OAAzB;kDACOpB,IAAI,CAACW,IAAL,CAAUP,GAAV,C;;;;;;;;;;;;;;;;;;;;eAKJF,c","sourcesContent":["import UserService from '../services/UserService'\nimport Util from '../utils/Utils'\nimport { dataUri } from '../middleware/multer'\nimport { uploader } from '../config/cloudinaryConfig'\n\nconst util = new Util()\n\nclass UserController {\n    static async addUser(req, res) {\n        const { username, email, password } = req.body\n        const user = req.body\n        if (!username || !email || !password) {\n            util.setError(400, 'Username, email, and password are required.')\n            return util.send(res)\n        }\n        try {\n            const createdUser = await UserService.addUser(user)\n            const token = util.generateAuthToken(createdUser.id)\n            const userData = { user: createdUser, token }\n            util.setSuccess(201, 'User created!', userData)\n            return util.send(res)\n        } catch (error) {\n            util.setError(400, error.message)\n            return util.send(res)\n        }\n    }\n\n    static async uploadAvatar(req, res) {\n        if (req.file) {\n            const file = dataUri(req).content\n            try {\n                const result = await uploader.upload(file)\n                const avatarUrl = result.url\n                const user = await UserService.uploadAvatar(req.user.id, avatarUrl)\n                util.setSuccess(200, 'Avatar Uploaded successfully!', user)\n                return util.send(res)\n            } catch (error) {\n                util.setError(400, error.message)\n                return util.send(res)\n            }\n        }\n    }\n\n    static async findByCredentials(req, res) {\n        const { username, password } = req.body\n        if (!username || !password) {\n            util.setError(400, 'Username and password are required.')\n            return util.send(res)\n        }\n        try {\n            const user = await UserService.findByCredentials(username, password)\n            const token = util.generateAuthToken(user.id)\n            const userData = { user, token }\n            util.setSuccess(200, 'Logged in successfully!', userData)\n            return util.send(res)\n        } catch (error) {\n            util.setError(400, error.message)\n            return util.send(res)\n        }\n    }\n}\n\nexport default UserController\n"],"file":"UserController.js"}