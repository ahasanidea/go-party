{"version":3,"sources":["../../src/controllers/UserController.js"],"names":["util","Util","UserController","req","res","body","username","email","password","user","setError","send","UserService","addUser","createdUser","token","generateAuthToken","id","activationLink","protocol","hostname","baseUrl","userData","setSuccess","message","params","data","jwt","verify","process","env","JWT_KEY","verifyAccount","file","content","uploader","upload","result","avatarUrl","url","uploadAvatar","findByCredentials","undefined","acceptedOptions","receivedOptions","Object","keys","isUpdateOption","every","option","includes","forEach","save"],"mappings":"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","sourcesContent":["import jwt from 'jsonwebtoken'\nimport UserService from '../services/UserService'\nimport Util from '../utils/Utils'\nimport { dataUri } from '../middleware/multer'\nimport { uploader } from '../config/cloudinaryConfig'\nimport { sendActivationEmail } from '../emails/account'\n\nconst util = new Util()\n\nclass UserController {\n    static async addUser(req, res) {\n        const { username, email, password } = req.body\n        const user = req.body\n        if (!username || !email || !password) {\n            util.setError(400, 'Username, email, and password are required.')\n            return util.send(res)\n        }\n        try {\n            const createdUser = await UserService.addUser(user)\n            const token = util.generateAuthToken(createdUser.id)\n            const activationLink = `${req.protocol}://${req.hostname}:8000${req.baseUrl}/confirmation/${token}`\n            // Send a welcome email to the user\n            sendActivationEmail(createdUser.email, createdUser.username, activationLink)\n            const userData = { user: createdUser, token }\n            util.setSuccess(201, 'User created!', userData)\n            return util.send(res)\n        } catch (error) {\n            util.setError(400, error.message)\n            return util.send(res)\n        }\n    }\n\n    static async verifyAccount(req, res) {\n        try {\n            const token = req.params.token\n            // eslint-disable-next-line no-undef\n            const data = jwt.verify(token, process.env.JWT_KEY)\n            await UserService.verifyAccount(data.id)\n            util.setSuccess(200, 'Account activated successfully!')\n            return util.send(res)\n        } catch (error) {\n            util.setError(400, error.message)\n            return util.send(res)\n        }\n    }\n\n    static async uploadAvatar(req, res) {\n        if (req.file) {\n            const file = dataUri(req).content\n            try {\n                const result = await uploader.upload(file)\n                const avatarUrl = result.url\n                const user = await UserService.uploadAvatar(req.user.id, avatarUrl)\n                util.setSuccess(200, 'Avatar Uploaded successfully!', user)\n                return util.send(res)\n            } catch (error) {\n                util.setError(400, error.message)\n                return util.send(res)\n            }\n        }\n    }\n\n    static async findByCredentials(req, res) {\n        const { username, password } = req.body\n        if (!username || !password) {\n            util.setError(400, 'Username and password are required.')\n            return util.send(res)\n        }\n        try {\n            const user = await UserService.findByCredentials(username, password)\n            const token = util.generateAuthToken(user.id)\n            const userData = { user, token }\n            util.setSuccess(200, 'Logged in successfully!', userData)\n            return util.send(res)\n        } catch (error) {\n            util.setError(400, error.message)\n            return util.send(res)\n        }\n    }\n\n    static async fetchUserProfile(req, res) {\n        const { user } = req\n        user.password = undefined\n        util.setSuccess(200, 'success', user)\n        return util.send(res)\n    }\n\n    static async editUserProfile(req, res) {\n        // Update user profile\n        const acceptedOptions = ['username', 'email', 'password', 'bio', 'dob']\n        const receivedOptions = Object.keys(req.body)\n        const user = req.user\n        const isUpdateOption = receivedOptions.every(option => acceptedOptions.includes(option))\n        if (!isUpdateOption) {\n            util.setError(400, 'Invalid update options!')\n            return util.send(res)\n        }\n        try {\n            receivedOptions.forEach(option => (user[option] = req.body[option]))\n            await user.save()\n            user.password = undefined\n            util.setSuccess(200, 'User updated successfully', user)\n            return util.send(res)\n        } catch (error) {\n            util.setError(400, error.message)\n            return util.send(res)\n        }\n    }\n}\n\nexport default UserController\n"],"file":"UserController.js"}
