{"version":3,"sources":["../../src/models/index.js"],"names":["basename","path","__filename","env","process","NODE_ENV","config","configJson","console","log","db","sequelize","environment","Sequelize","use_env_variable","DB_NAME","DB_USER","DB_PASS","host","DB_HOST","port","DB_PORT","dialect","dialectOption","ssl","logging","database","username","password","fs","readdirSync","__dirname","filter","file","indexOf","slice","forEach","model","join","name","Object","keys","modelName","associate"],"mappings":";;;;;;;;;AACA;;AACA;;AACA;;AACA;;AAJA;AAMA,IAAMA,QAAQ,GAAGC,iBAAKD,QAAL,CAAcE,UAAd,CAAjB;;AACA,IAAMC,GAAG,GAAGC,OAAO,CAACD,GAAR,CAAYE,QAAZ,GAAuBD,OAAO,CAACD,GAAR,CAAYE,QAAnC,GAA8C,aAA1D;AAEA,IAAMC,MAAM,GAAGC,mBAAWJ,GAAX,CAAf;AAEAK,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyCN,GAAzC;AAEA,IAAMO,EAAE,GAAG,EAAX;AAEA,IAAIC,SAAJ;;AACA,IAAIL,MAAM,CAACM,WAAP,KAAuB,YAA3B,EAAyC;AACrCD,EAAAA,SAAS,GAAG,IAAIE,qBAAJ,CACRT,OAAO,CAACD,GAAR,CAAYG,MAAM,CAACQ,gBAAnB,CADQ,EAC8BR,MAD9B,CAAZ;AAGAK,EAAAA,SAAS,GAAG,IAAIE,qBAAJ,CACRT,OAAO,CAACD,GAAR,CAAYY,OADJ,EAERX,OAAO,CAACD,GAAR,CAAYa,OAFJ,EAGRZ,OAAO,CAACD,GAAR,CAAYc,OAHJ,EAGa;AACjBC,IAAAA,IAAI,EAAEd,OAAO,CAACD,GAAR,CAAYgB,OADD;AAEjBC,IAAAA,IAAI,EAAEhB,OAAO,CAACD,GAAR,CAAYkB,OAFD;AAGjBC,IAAAA,OAAO,EAAE,UAHQ;AAIjBC,IAAAA,aAAa,EAAE;AACXC,MAAAA,GAAG,EAAE,IADM;AAEX,gBAAQ;AAFG,KAJE;AAQjBC,IAAAA,OAAO,EAAE;AARQ,GAHb,CAAZ;AAcH,CAlBD,MAkBO;AACHd,EAAAA,SAAS,GAAG,IAAIE,qBAAJ,CACRP,MAAM,CAACoB,QADC,EACSpB,MAAM,CAACqB,QADhB,EAC0BrB,MAAM,CAACsB,QADjC,EAC2CtB,MAD3C,CAAZ;AAGH;;AAEDuB,eACKC,WADL,CACiBC,SADjB,EAEKC,MAFL,CAEY,UAACC,IAAD,EAAU;AACd,SAAQA,IAAI,CAACC,OAAL,CAAa,GAAb,MAAsB,CAAvB,IACHD,IAAI,KAAKjC,QADN,IACoBiC,IAAI,CAACE,KAAL,CAAW,CAAC,CAAZ,MAAmB,KAD9C;AAEH,CALL,EAMKC,OANL,CAMa,UAACH,IAAD,EAAU;AACf,MAAMI,KAAK,GAAG1B,SAAS,UAAT,CAAiBV,iBAAKqC,IAAL,CAAUP,SAAV,EAAqBE,IAArB,CAAjB,CAAd;AACAvB,EAAAA,EAAE,CAAC2B,KAAK,CAACE,IAAP,CAAF,GAAiBF,KAAjB;AACH,CATL;;AAWAG,MAAM,CAACC,IAAP,CAAY/B,EAAZ,EAAgB0B,OAAhB,CAAwB,UAACM,SAAD,EAAe;AACnC,MAAIhC,EAAE,CAACgC,SAAD,CAAF,CAAcC,SAAlB,EAA6B;AACzBjC,IAAAA,EAAE,CAACgC,SAAD,CAAF,CAAcC,SAAd,CAAwBjC,EAAxB;AACH;AACJ,CAJD;AAMAA,EAAE,CAACC,SAAH,GAAeA,SAAf;AACAD,EAAE,CAACG,SAAH,GAAeA,qBAAf;eAEeH,E","sourcesContent":["/* eslint-disable no-undef */\nimport fs from 'fs'\nimport path from 'path'\nimport Sequelize from 'sequelize'\nimport configJson from '../database/config/config'\n\nconst basename = path.basename(__filename)\nconst env = process.env.NODE_ENV ? process.env.NODE_ENV : 'development'\n\nconst config = configJson[env]\n\nconsole.log('this is the environment: ', env)\n\nconst db = {}\n\nlet sequelize\nif (config.environment === 'production') {\n    sequelize = new Sequelize(\n        process.env[config.use_env_variable], config\n    )\n    sequelize = new Sequelize(\n        process.env.DB_NAME,\n        process.env.DB_USER,\n        process.env.DB_PASS, {\n            host: process.env.DB_HOST,\n            port: process.env.DB_PORT,\n            dialect: 'postgres',\n            dialectOption: {\n                ssl: true,\n                native: true\n            },\n            logging: true\n        }\n    )\n} else {\n    sequelize = new Sequelize(\n        config.database, config.username, config.password, config\n    )\n}\n\nfs\n    .readdirSync(__dirname)\n    .filter((file) => {\n        return (file.indexOf('.') !== 0) && \n           (file !== basename) && (file.slice(-3) === '.js')\n    })\n    .forEach((file) => {\n        const model = sequelize.import(path.join(__dirname, file))\n        db[model.name] = model\n    })\n\nObject.keys(db).forEach((modelName) => {\n    if (db[modelName].associate) {\n        db[modelName].associate(db)\n    }\n})\n\ndb.sequelize = sequelize\ndb.Sequelize = Sequelize\n\nexport default db"],"file":"index.js"}